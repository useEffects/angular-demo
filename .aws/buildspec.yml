version: 0.2

env:
  variables:
    S3_BUCKET: "locality-ui"
    ENV_FOLDER: "dev"
    API_URL: "https://example.com"
    ROLE_ARN: "arn:aws:iam::448049805501:role/LambdaEdgeRole"
    CLOUDFRONT_ID: "EHNGHGK7DW40F"


phases:
  install:
    commands:
      - echo "Installing NVM and setting up Node.js v20.15.1..."
      - curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
      - |
        export NVM_DIR="$HOME/.nvm"
        echo "NVM_DIR is set to $NVM_DIR"
        [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
        nvm install 20.15.1
        nvm use 20.15.1
        nvm install-latest-npm
        echo "Node.js version: $(node -v)"
      - echo "Fetching secrets from AWS Secrets Manager..."
      - |
        SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "locality-ui-dev" --query ENVIRONMENT --output text --region ap-southeast-2)
        echo "Secret retrieved: $SECRET_VALUE"
      - echo "Installing dependencies..."
      - npm install -g aws-cli
      - npm install

  build:
    commands:
      - echo "Building the Angular project..."
      - npm run build
      - echo "Determining environment folder..."
      - ENV_FOLDER="DEV/"
      - echo "Using folder $ENV_FOLDER"
      - echo "Syncing the entire dist folder to S3..."
      - aws s3 sync dist s3://$S3_BUCKET/$ENV_FOLDER --delete

  post_build:
    commands:
      - echo "Generating and deploying Lambda@Edge function..."
      - |
        export API_URL=https://example.com
        export ROLE_ARN=arn:aws:iam::448049805501:role/LambdaEdgeRole
        export CLOUDFRONT_ID=EHNGHGK7DW40F
      - npx --yes envsub public/assets/env.example.js env.js
      - |
        cat <<EOF > lambda-edge.js
        'use strict';
        exports.handler = async (event) => {
            return {
                status: '200',
                statusDescription: 'OK',
                headers: {
                    'content-type': [{ key: 'Content-Type', value: 'application/javascript' }],
                    'cache-control': [{ key: 'Cache-Control', value: 'public, max-age=31536000, immutable' }]
                },
                body: \`$(cat env.js)\`
            };
        };
        EOF
      - zip lambda-edge.zip lambda-edge.js

      # Check if Lambda function exists
      - |
        FUNCTION_NAME="EnvLambdaEdgeFunction"
        if aws lambda get-function --function-name $FUNCTION_NAME >/dev/null 2>&1; then
          echo "Function $FUNCTION_NAME exists. Updating..."
          aws lambda update-function-code --function-name $FUNCTION_NAME --zip-file fileb://lambda-edge.zip
        else
          echo "Function $FUNCTION_NAME does not exist. Creating..."
          aws lambda create-function --function-name EnvLambdaEdgeFunction \
            --runtime nodejs18.x \
            --role $ROLE_ARN \
            --handler lambda-edge.handler \
            --zip-file fileb://lambda-edge.zip \
            --region us-east-1

          
          echo "Waiting for Lambda function to become active..."
          sleep 10  # Give AWS some time to process
        fi

      - echo "Invalidating CloudFront cache..."
      - aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"

artifacts:
  files:
    - "**/*"
